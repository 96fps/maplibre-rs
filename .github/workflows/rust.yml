name: Rust

on: [ push, pull_request ]

jobs:
  build-x86:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Dependencies
        run: sudo apt-get install -y libwayland-dev libxkbcommon-dev
      - name: Build
        run: cargo build --example desktop
      - uses: actions/upload-artifact@v2
        with:
          name: mapr
          path: target/debug/mapr

  build-macos:
    runs-on: macOS-11
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cargo Build
        run: cargo build --target aarch64-apple-darwin --lib
      - name: XCode Build
        run: cd apple/mapr && xcodebuild -scheme "mapr (macOS)" -arch arm64 build

  build-iphoneos:
    runs-on: macOS-11
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cargo Build
        run: cargo build --target aarch64-apple-ios --lib # First running `cargo build` before `xcodebuild` is REQUIRED!
                                                          # Else the rust compilation fails during linking. This is
                                                          # probably due to some weird environment variables set during
                                                          # xcodebuild execution
      - name: XCode Build
        run: cd apple/mapr && xcodebuild -scheme "mapr (iOS)" -arch arm64 -sdk iphoneos build CODE_SIGNING_ALLOWED=NO

  build-aarch64-android:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: tools/build-android
      - uses: actions/upload-artifact@v2
        with:
          name: mapr.apk
          path: target/debug/apk/mapr.apk

  build-wasm-webgl:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
        working-directory: web
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Prepare Rust Toolchain # This is required because we are recompiling the stdlib
        run: |
          rustup install nightly-2021-12-07-x86_64-unknown-linux-gnu
          rustup component add rust-src --toolchain nightly-2021-12-07-x86_64-unknown-linux-gnu
      - name: NPM Install
        run: npm install
      - name: Build
        run: npm run webgl-production-build
      - name: Deploy to maxammann.org
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_MAXAMMANN_ORG }}
        run: |
          echo "$SSH_KEY" > id_rsa
          chmod 600 id_rsa
          ssh -o StrictHostKeyChecking=no -i id_rsa max@maxammann.org 'mkdir -p ~/public_html/mapr && find ~/public_html/mapr -type f -not -name ".htaccess" -delete'
          rsync -e "ssh -o StrictHostKeyChecking=no -i id_rsa" -r "dist/demo/." max@maxammann.org:~/public_html/mapr/

  build-wasm-webgpu:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
        working-directory: web
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Prepare Rust Toolchain # This is required because we are recompiling the stdlib
        run: |
          rustup install nightly-2021-12-07-x86_64-unknown-linux-gnu
          rustup component add rust-src --toolchain nightly-2021-12-07-x86_64-unknown-linux-gnu
      - name: NPM Install
        run: npm install
      - name: Build
        run: npm run production-build
      - name: Deploy to maxammann.org
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_MAXAMMANN_ORG }}
        run: |
          echo "$SSH_KEY" > id_rsa
          chmod 600 id_rsa
          ssh -o StrictHostKeyChecking=no -i id_rsa max@maxammann.org 'mkdir -p ~/public_html/mapr-webgpu && find ~/public_html/mapr-webgpu -type f -not -name ".htaccess" -delete'
          rsync -e "ssh -o StrictHostKeyChecking=no -i id_rsa" -r "dist/demo/." max@maxammann.org:~/public_html/mapr-webgpu/

  book:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
        working-directory: docs
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates*
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1
      - name: Install mdbook
        run: |
          cargo install mdbook --no-default-features --features output --vers "^0.1.0"
      - name: Build
        run: mdbook build
      - name: Deploy to maxammann.org
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_MAXAMMANN_ORG }}
        run: |
          echo "$SSH_KEY" > id_rsa
          chmod 600 id_rsa
          ssh -o StrictHostKeyChecking=no -i id_rsa max@maxammann.org 'mkdir -p ~/public_html/mapr-docs && find ~/public_html/mapr-docs -type f -not -name ".htaccess" -delete'
          rsync -e "ssh -o StrictHostKeyChecking=no -i id_rsa" -r "book/." max@maxammann.org:~/public_html/mapr-docs/
